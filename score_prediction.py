# -*- coding: utf-8 -*-
"""Score_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FdQaz547KMtwtDb8QLPlqE4X8msUQaaV

**Prediction Using Supervised ML**

**Prediction of the precentage of an student based on the no. of study hours**

**Author: Sumon Chatterjee**

**A simple linear regression task involving two variables**
"""

#importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt                       #for plotting
from sklearn.model_selection import train_test_split  #for training, testing and splitting of data
from sklearn.linear_model import LinearRegression     #for performing linear regression
from sklearn import metrics                           #for finding the mean absolute error

#displaying the data from the given link
url = "http://bit.ly/w-data"
data = pd.read_csv(url)
data

"""**Evaluating the given dataset**"""

data.shape #checking the shape of the dataset

data.dtypes  #checking the data types of the dataset

data.isnull()  #checking whether any null values present or not

data.describe()  #checking the mean,std etc of give dataset

"""**Scatter plot of given 2 variables**"""

X = data['Hours']
Y = data['Scores']
plt.scatter(X,Y)
plt.title('Hours vs Score')
plt.xlabel('Hours studied')
plt.ylabel('Score (in percentage)')
plt.show()

"""**Dividing the data into "attributes" and "labels"**"""

X = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values

"""**Splitting the data into training and test sets**"""

X_train, X_test, Y_train, Y_test = train_test_split(X, y,test_size=0.2, random_state=0)

"""**Evalutation of train and test sets**"""

len(X_train)

len(Y_train)

len(Y_test)

len(X_test)

"""**Training the data set**"""

model = LinearRegression()
model.fit(X_train,Y_train)

"""**Showing the intercept and coefficient of the regression line**"""

model.intercept_

model.coef_

"""**Plotting the regression line**"""

line = model.coef_*X + model.intercept_
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

"""**Printing the test data set**"""

print(X_test)

"""**Doing prediction based on the test data set & displaying actual and predicted result**"""

Y_pred = model.predict(X_test)
df = pd.DataFrame({'Actual': Y_test, 'Predicted': Y_pred})  
df

"""**Predicting score based on a given input**"""

hours = 9.25
my_pred = model.predict([[hours]])
print("No of Hours studied: = {}".format(hours))
print("Predicted Score according to our ML model: = {}".format(my_pred[0]))

"""**Determining the mean absolute error (MSE) of our ML model:**"""

print("Mean Absolute Error of our ML model is: ", metrics.mean_absolute_error(Y_test,Y_pred))